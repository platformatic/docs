name: "Deploy Documentation"

on:
  workflow_call:
    inputs:
      force:
        type: boolean
        default: false
      git_ref:
        type: string
        default: main
      original_event:
        type: string
    secrets:
      GH_API_TOKEN:
        description: "GitHub API Token"
        required: true
      TARGET_REPO:
        description: "The repo wheere Docusaurus is"
        required: true
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_API_TOKEN }}
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Install dependencies
        run: npm install
      - name: Check local and remote versions
        id: check
        run: |
          node scripts/check-versions.mjs >> $GITHUB_OUTPUT
        env:
          TARGET_REPO: ${{ secrets.TARGET_REPO }}
          GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Print current versions
        run: |
          echo "Remote versions: ${{ steps.check.outputs.remote-versions }}
          echo "Docs version: ${{ steps.check.outputs.local-versions }}"
          echo "Update needed: ${{ steps.check.outputs.needs-update }}"
      - name: Build documentation
        if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
        run: |
          node scripts/build-documentation.mjs 'main ${{ steps.check.outputs.build-arg }}'
      - name: Push commit
        if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[automated commit] Bump docs to versions ${{ steps.check.outputs.remote-versions }}"
          tagging_message: "${{ steps.check.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to GitHub Pages
        if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build

      # - name: Checkout main repo
      #   if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ${{ secrets.TARGET_REPO }}
      #     token: ${{ secrets.GH_API_TOKEN }}
      #     path: main-repo
      #     ref: ${{ inputs.git_ref || format('v{0}', env.REMOTE_VERSION) }}
      # - name: Copy docs directory
      #   if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
      #   run: |
      #     rm -rf ./docs
      #     cp -r main-repo/docs .
      #     cp -r main-repo/docs/sidebars.js .
      #     rm -rf main-repo
      # - name: Install deps
      #   if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
      #   run: |
      #     npm install
      # - name: Create docusaurus version
      #   if: (!inputs.force && steps.check.outputs.needs-update == 'true')
      #   run: |
      #     npx docusaurus docs:version ${{ env.REMOTE_VERSION }}
      #   env:
      #     REMOTE_VERSION: ${{ steps.check_main_repo_version.outputs.remote-version }}
      # - name: Purge old versions
      #   if: (!inputs.force && steps.check.outputs.needs-update == 'true')
      #   run: |
      #     node ./scripts/purge-old-versions.js
      # - name: Build Docusaurus website
      #   if: inputs.original_event == 'push_on_main' || inputs.force || steps.check.outputs.needs-update == 'true'
      #   run: |
      #     npm run build
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
