"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[9114],{4699:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>h});var l=i(4848),s=i(8453),t=i(1470),r=i(9365);const c={toc_max_heading_level:4},a="Platformatic CLI",o={id:"cli",title:"Platformatic CLI",description:"Installation and usage",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/docs/next/cli",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/platformatic/edit/main/docs/cli.md",tags:[],version:"current",frontMatter:{toc_max_heading_level:4},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/next/Overview"},next:{title:"Overview",permalink:"/docs/next/composer/overview"}},d={},h=[{value:"Installation and usage",id:"installation-and-usage",level:2},{value:"Commands",id:"commands",level:2},{value:"help",id:"help",level:3},{value:"compile",id:"compile",level:4},{value:"inject",id:"inject",level:4},{value:"logs",id:"logs",level:4},{value:"ps",id:"ps",level:4},{value:"start",id:"start",level:4},{value:"upgrade",id:"upgrade",level:4},{value:"client",id:"client",level:3},{value:"help",id:"help-1",level:4},{value:"composer",id:"composer",level:3},{value:"create",id:"create",level:4},{value:"help",id:"help-2",level:4},{value:"openapi schemas fetch",id:"openapi-schemas-fetch",level:4},{value:"start",id:"start-1",level:4},{value:"db",id:"db",level:3},{value:"compile",id:"compile-1",level:4},{value:"create",id:"create-1",level:4},{value:"help",id:"help-3",level:4},{value:"migrations apply",id:"migrations-apply",level:4},{value:"migrations create",id:"migrations-create",level:4},{value:"migrations",id:"migrations",level:4},{value:"schema",id:"schema",level:4},{value:"seed",id:"seed",level:4},{value:"start",id:"start-2",level:4},{value:"types",id:"types",level:4},{value:"service",id:"service",level:3},{value:"compile",id:"compile-2",level:4},{value:"create",id:"create-2",level:4},{value:"help",id:"help-4",level:4},{value:"schema",id:"schema-1",level:4},{value:"start",id:"start-3",level:4},{value:"frontend",id:"frontend",level:3},{value:"runtime",id:"runtime",level:3},{value:"compile",id:"compile-3",level:4},{value:"help",id:"help-5",level:4},{value:"start",id:"start-4",level:4},{value:"start",id:"start-5",level:3},{value:"ctl",id:"ctl",level:3},{value:"config",id:"config",level:4},{value:"env",id:"env",level:4},{value:"help",id:"help-6",level:4},{value:"inject",id:"inject-1",level:4},{value:"logs",id:"logs-1",level:4},{value:"ps",id:"ps-1",level:4},{value:"reload",id:"reload",level:4},{value:"restart",id:"restart",level:4},{value:"services",id:"services",level:4},{value:"stop",id:"stop",level:4}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"platformatic-cli",children:"Platformatic CLI"})}),"\n",(0,l.jsx)(n.h2,{id:"installation-and-usage",children:"Installation and usage"}),"\n",(0,l.jsx)(n.p,{children:"Install the Platformatic CLI as a dependency for your project:"}),"\n",(0,l.jsxs)(t.A,{groupId:"package-manager",children:[(0,l.jsx)(r.A,{value:"npm",label:"npm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install platformatic\n"})})}),(0,l.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"yarn add platformatic\n"})})}),(0,l.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pnpm add platformatic\n"})})})]}),"\n",(0,l.jsx)(n.p,{children:"Once it's installed you can run it with:"}),"\n",(0,l.jsxs)(t.A,{groupId:"package-manager",children:[(0,l.jsx)(r.A,{value:"npm",label:"npm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic\n"})})}),(0,l.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"yarn platformatic\n"})})}),(0,l.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pnpm platformatic\n"})})})]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"platformatic"})," package can be installed globally, but installing it as a\nproject dependency ensures that everyone working on the project is using the\nsame version of the Platformatic CLI."]})}),"\n",(0,l.jsx)(n.h2,{id:"commands",children:"Commands"}),"\n",(0,l.jsx)(n.h3,{id:"help",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Welcome to Platformatic. Available commands are:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - display this message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - show more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"db"})," - start Platformatic DB; type ",(0,l.jsx)(n.code,{children:"platformatic db help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"service"})," - start Platformatic Service; type ",(0,l.jsx)(n.code,{children:"platformatic service help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"upgrade"})," - upgrade the Platformatic configuration to the latest version."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"gh"})," - create a new gh action for Platformatic deployments."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"runtime"})," - start Platformatic Runtime; type ",(0,l.jsx)(n.code,{children:"platformatic runtime help"})," to know more."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start a Platformatic application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"client"})," - generate a Platformatic client."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ps"})," - list all Platformatic runtime applications."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"logs"})," - stream logs for a Platformatic runtime application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inject"})," - inject a request into a Platformatic runtime application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ctl"})," - Platformatic Control commands; ",(0,l.jsx)(n.code,{children:"platformatic ctl help"})," to know more."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"compile",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile all typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic compile\n"})}),"\n",(0,l.jsx)(n.p,{children:"This command will compile the TypeScript plugins for each platformatic application."}),"\n",(0,l.jsx)(n.h4,{id:"inject",children:"inject"}),"\n",(0,l.jsx)(n.p,{children:"Injects a request to the Platformatic runtime service."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'  $ platformatic inject -n runtime-name /hello\n     -X POST\n     -H "Content-Type: application/json"\n     -d \'{"key": "value"}\'\n'})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process ",(0,l.jsx)(n.code,{children:"id"})," of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-s, --service <string>"})," - The name of the runtime service."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-X, --request <string>"})," - The request HTTP method. Default is ",(0,l.jsx)(n.code,{children:"GET"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-H, --header <string>"})," - The request header. Can be used multiple times."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-d, --data <string>"})," - The request data."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-i, --include <boolean>"})," - Include the response headers in the output. Default is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-v, --verbose <boolean>"})," - Make the operation more talkative. Default is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-o, --output <file>"})," - Write the response to the specified file."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inject"})," command sends a request to the runtime service and prints the\nresponse to the standard output. If the ",(0,l.jsx)(n.code,{children:"--service"})," option is not specified the\nrequest is sent to the runtime entry point."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inject"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"logs",children:"logs"}),"\n",(0,l.jsx)(n.p,{children:"Streams logs from the platformatic runtime application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic logs -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-l, --level <string>"})," - The pino log level to stream. Default is ",(0,l.jsx)(n.code,{children:"info"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-s, --service <string>"})," - The name of the service to stream logs from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--pretty <boolean>"})," - Pretty print the logs. Default is ",(0,l.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"--service"})," is not specified, the command will stream logs from all services."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"logs"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"ps",children:"ps"}),"\n",(0,l.jsx)(n.p,{children:"Lists all running platformatic runtime applications."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ps\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To see the list of all available control commands, run ",(0,l.jsx)(n.code,{children:"platformatic ctl help"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ps"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsx)(n.h4,{id:"start",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start a Platformatic application with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic start\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect[=[host:]port]"})," - Start the Node.js debugger. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect-brk[=[host:]port]"})," - Start the Node.js debugger and block until a client has attached. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"upgrade",children:"upgrade"}),"\n",(0,l.jsx)(n.p,{children:"Upgrade the Platformatic schema configuration to the latest version."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic upgrade\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a schema configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.tml"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/service/configuration",children:"Platformatic Service Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"client",children:"client"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic client <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"help-1",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Create a Fastify plugin that exposes a client for a remote OpenAPI or GraphQL API."}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a remote OpenAPI API, you can use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/to/schema/file -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a remote Graphql API, you can use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/graphql -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"Instead of a URL, you can also use a local file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client path/to/schema -n myclient\n"})}),"\n",(0,l.jsx)(n.p,{children:"To create a client for a service running in a Platformatic runime use the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client --runtime SERVICE_NAME -n myclient\n"})}),"\n",(0,l.jsxs)(n.p,{children:["All the above commands will create a Fastify plugin that exposes a client in the ",(0,l.jsx)(n.code,{children:"request"})," object for the remote API in a folder ",(0,l.jsx)(n.code,{children:"myclient"})," and a file named myclient.js inside it."]}),"\n",(0,l.jsxs)(n.p,{children:["If platformatic config file is specified, it will be edited and a ",(0,l.jsx)(n.code,{children:"clients"})," section will be added.\nThen, in any part of your Platformatic application, you can use the client."]}),"\n",(0,l.jsx)(n.p,{children:"You can use the client in your application in Javascript, calling a GraphQL endpoint:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"module.exports = async function (app, opts) {\n  app.post('/', async (request, reply) => {\n    const res = await request.myclient.graphql({\n      query: 'query { hello }'\n    })\n    return res\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"or in Typescript, calling an OpenAPI endpoint:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"import { FastifyInstance } from 'fastify'\n/// <reference path=\"./myclient\" />\n\nexport default async function (app: FastifyInstance) {\n  app.get('/', async (request, reply) => {\n    return request.myclient.get({})\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can generate only the types with the --types-only flag."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://exmaple.com/to/schema/file --name myclient --types-only\n"})}),"\n",(0,l.jsx)(n.p,{children:"Will create the single myclient.d.ts file."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <name>"})," - Name of the client."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-f, --folder <name>"})," - Name of the plugin folder, defaults to --name value."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --typescript"})," - Generate the client plugin in TypeScript."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-R, --runtime <serviceId>"})," - Generate the client for the ",(0,l.jsx)(n.code,{children:"serviceId"})," running in the current runtime"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--frontend"})," - Generated a browser-compatible client that uses ",(0,l.jsx)(n.code,{children:"fetch"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full-response"})," - Client will return full response object rather than just the body."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full-request"})," - Client will be called with all parameters wrapped in ",(0,l.jsx)(n.code,{children:"body"}),", ",(0,l.jsx)(n.code,{children:"headers"})," and ",(0,l.jsx)(n.code,{children:"query"})," properties. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--full"})," - Enables both ",(0,l.jsx)(n.code,{children:"--full-request"})," and ",(0,l.jsx)(n.code,{children:"--full-response"})," overriding them."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--optional-headers <headers>"})," - Comma separated string of headers that will be marked as optional in the type file. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--validate-response"})," - If set, will validate the response body against the schema. Ignored if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--language js|ts"})," - Generate a Javascript or Typescript frontend client. Only works if ",(0,l.jsx)(n.code,{children:"--frontend"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--url-auth-headers <stringify-headers>"})," - When the Open API schema is passed as URL (instead of static file) this property allow to pass authorization headers. Headers should be passed as ",(0,l.jsx)(n.code,{children:"string"})," (e.g. ",(0,l.jsx)(n.code,{children:'\'{"authorization":"42"}\''}),")."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--types-only"})," - Generate only the type file."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"composer",children:"composer"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic composer <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"create",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic Composer application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-2",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"create"})," - creates a new Platformatic Composer application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"openapi schemas fetch"})," - fetch OpenAPI schemas from services."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"openapi-schemas-fetch",children:"openapi schemas fetch"}),"\n",(0,l.jsx)(n.p,{children:"Fetch OpenAPI schemas from remote services to use in your Platformatic project."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic composer openapi schemas fetch\n"})}),"\n",(0,l.jsxs)(n.p,{children:["It will fetch all the schemas from the remote services and store them by path\nset in the ",(0,l.jsx)(n.code,{children:"platformatic.json"})," file. If the path is not set, it will\nskip fetching the schema."]}),"\n",(0,l.jsx)(n.h4,{id:"start-1",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Composer server with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic composer start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'  {\n    "server": {\n      "hostname": "127.0.0.1",\n      "port": 0,\n      "logger": {\n        "level": "info"\n      }\n    },\n    "composer": {\n      "services": [\n        {\n          "id": "service1",\n          "origin": "http://127.0.0.1:3051",\n          "openapi": {\n            "url": "/documentation/json"\n          }\n        },\n        {\n          "id": "service2",\n          "origin": "http://127.0.0.1:3052",\n          "openapi": {\n            "file": "./schemas/service2.openapi.json"\n          }\n        }\n      ],\n      "refreshTimeout": 1000\n    }\n  }\n'})}),"\n",(0,l.jsx)(n.p,{children:"By sending the SIGUSR2 signal, the server can be reloaded."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/composer/configuration",children:"Platformatic Composer Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"db",children:"db"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic db <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-1",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db compile\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, the Platformatic DB will compile typescript\nplugins in the ",(0,l.jsx)(n.code,{children:"outDir"})," directory."]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"create-1",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic DB application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"connectionString <string>"})," - the connection string for your database (Default: ",(0,l.jsx)(n.code,{children:"sqlite://./db.sqlite"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations <boolean>"})," - Creates sample migrations (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-3",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compile"})," - compile typescript plugins."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"seed"})," - run a seed file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"types"})," - generate typescript types for entities."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema"})," - generate and print api schema."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations create"})," - generate do and undo migration files."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations apply"})," - apply migration files."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations-apply",children:"migrations apply"}),"\n",(0,l.jsx)(n.p,{children:"Apply all configured migrations to the database:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The migrations will be applied in the order they are specified in the\nfolder defined in the configuration file. If you want to apply a specific migration,\nyou can use the ",(0,l.jsx)(n.code,{children:"--to"})," option:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply --to 001\n"})}),"\n",(0,l.jsx)(n.p,{children:"Here is an example migration:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"  CREATE TABLE graphs (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n  );\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can always roll back to a specific migration with:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations apply --to VERSION\n"})}),"\n",(0,l.jsx)(n.p,{children:"Use 000 to reset to the initial state."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-t, --to <version>"})," - Migrate to a specific version."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations-create",children:"migrations create"}),"\n",(0,l.jsx)(n.p,{children:"Create next migration files."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations create\n"})}),"\n",(0,l.jsx)(n.p,{children:"It will generate do and undo sql files in the migrations folder. The name of the\nfiles will be the next migration number."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db migrations create\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The migration files are named ",(0,l.jsx)(n.code,{children:"001.<do|undo>.sql"}),", ",(0,l.jsx)(n.code,{children:"002.<do|undo>.sql"})," etc..."]}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"migrations",children:"migrations"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations create"})," - generate do and undo migration files."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"migrations apply"})," - apply migration files."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"schema",children:"schema"}),"\n",(0,l.jsx)(n.p,{children:"Update the config schema file:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - update the JSON schema config available on ",(0,l.jsx)(n.code,{children:"platformatic.json"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Your configuration on ",(0,l.jsx)(n.code,{children:"platformatic.json"})," has a schema defined to improve the developer experience and avoid mistakes when updating the configuration of Platformatic DB.\nWhen you run ",(0,l.jsx)(n.code,{children:"platformatic db init"}),", a new JSON ",(0,l.jsx)(n.code,{children:"$schema"})," property is added in ",(0,l.jsx)(n.code,{children:"platformatic.json"}),". This can allow your IDE to add suggestions (f.e. mandatory/missing fields, types, default values) by opening the config in ",(0,l.jsx)(n.code,{children:"platformatic.json"}),".\nRunning ",(0,l.jsx)(n.code,{children:"platformatic schema config"})," you can update your schema so that it matches well the latest changes available on your config."]}),"\n",(0,l.jsx)(n.p,{children:"Generate a schema from the database and prints it to standard output:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema graphql"})," - generate the GraphQL schema"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema openapi"})," - generate the OpenAPI schema"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"seed",children:"seed"}),"\n",(0,l.jsx)(n.p,{children:"Load a seed into the database. This is a convenience method that loads\na JavaScript file and configure @platformatic/sql-mapper to connect to\nthe database specified in the configuration file."}),"\n",(0,l.jsx)(n.p,{children:"Here is an example of a seed file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"  'use strict'\n\n  module.exports = async function ({ entities, db, sql }) {\n    await entities.graph.save({ input: { name: 'Hello' } })\n    await db.query(sql`\n      INSERT INTO graphs (name) VALUES ('Hello 2');\n    `)\n  }\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You can run this using the ",(0,l.jsx)(n.code,{children:"seed"})," command:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db seed seed.js\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--config"})," - Path to the configuration file."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"start-2",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic DB server with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic db start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a  configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'  {\n    "server": {\n      "hostname": "127.0.0.1",\n      "port": 0,\n      "logger": {\n        "level": "info"\n      }\n    },\n    "db": {\n      "connectionString": "sqlite://./db"\n    },\n    "migrations": {\n      "dir": "./migrations"\n    }\n  }\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Remember to create a migration, run the ",(0,l.jsx)(n.code,{children:"db help migrate"})," command to know more."]}),"\n",(0,l.jsxs)(n.p,{children:["All outstanding migrations will be applied to the database unless the\n",(0,l.jsx)(n.code,{children:"migrations.autoApply"})," configuration option is set to false."]}),"\n",(0,l.jsx)(n.p,{children:"By sending the SIGUSR2 signal, the server can be reloaded."}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config FILE"})," - Specify a configuration file to use."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"types",children:"types"}),"\n",(0,l.jsx)(n.p,{children:"Generate typescript types for your entities from the database."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic db types\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, the Platformatic DB will generate a ",(0,l.jsx)(n.code,{children:"types"}),"\nfolder with a typescript file for each database entity. It will also generate a\n",(0,l.jsx)(n.code,{children:"global.d.ts"})," file that injects the types into the Application instance."]}),"\n",(0,l.jsxs)(n.p,{children:["In order to add type support to your plugins, you need to install some additional\ndependencies. To do this, copy and run an ",(0,l.jsx)(n.code,{children:"npm install"}),' command with dependencies\nthat "platformatic db types" will ask you.']}),"\n",(0,l.jsx)(n.p,{children:"Here is an example of a platformatic plugin.js with jsdoc support.\nYou can use it to add autocomplete to your code."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"/// <reference path=\"./global.d.ts\" />\n'use strict'\n\n/** @param {import('fastify').FastifyInstance} app */\nmodule.exports = async function (app) {\n  app.get('/movie', async () => {\n    const movies = await app.platformatic.entities.movie.find({\n      where: { title: { eq: 'The Hitchhiker\\'s Guide to the Galaxy' } }\n    })\n    return movies[0].id\n  })\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"Platformatic DB Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"service",children:"service"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic service <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-2",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile typescript plugins."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic service compile\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As a result of executing this command, Platformatic Service will compile typescript\nplugins in the ",(0,l.jsx)(n.code,{children:"outDir"})," directory."]}),"\n",(0,l.jsxs)(n.p,{children:["Using the  ",(0,l.jsx)(n.code,{children:"--clean"})," flag, the outDir directory will be removed before the new compilation process starts."]}),"\n",(0,l.jsx)(n.p,{children:"If not specified, the configuration will be loaded from any of the following, in the current directory."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.json"}),", or"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"platformatic.yml"}),", or"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"platformatic.tml"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can find more details about the configuration format here:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/service/configuration",children:"Platformatic Service Configuration"})}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"create-2",children:"create"}),"\n",(0,l.jsx)(n.p,{children:"Creates a new Platformatic Service application."}),"\n",(0,l.jsx)(n.p,{children:"Options are"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dir <string>"})," - the directory where to create the project (Default: ",(0,l.jsx)(n.code,{children:"process.cwd() + 'platformatic-composer'"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"port <string>"})," - the port where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"3042"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"hostname <string>"})," - the hostname where the application will listen (Default: ",(0,l.jsx)(n.code,{children:"0.0.0.0"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"git <boolean>"})," - Init the git repository (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"typescript <boolean>"})," - Use Typescript (Default: ",(0,l.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"install <boolean>"})," - Run or not ",(0,l.jsx)(n.code,{children:"npm install"})," after creating the files (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"plugin <boolean>"})," - Creates a sample plugin and tests (Default: ",(0,l.jsx)(n.code,{children:"true"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"help-4",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"create"})," - creates a new Platformatic Service application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - show more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the server."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - generate the schema configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"compile"})," - compile the typescript files."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"schema-1",children:"schema"}),"\n",(0,l.jsx)(n.p,{children:"Update the config schema file:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schema config"})," - update the JSON schema config available on ",(0,l.jsx)(n.code,{children:"platformatic.json"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Your configuration on ",(0,l.jsx)(n.code,{children:"platformatic.json"})," has a schema defined to improve the developer experience and avoid mistakes when updating the configuration of Platformatic Service.\nWhen you initialize a new Platformatic service (f.e. running ",(0,l.jsx)(n.code,{children:"npm create platformatic@latest"}),"), a new JSON ",(0,l.jsx)(n.code,{children:"$schema"})," property is added in the ",(0,l.jsx)(n.code,{children:"platformatic.json"})," config. This can allow your IDE to add suggestions (f.e. mandatory/missing fields, types, default values) by opening the config in ",(0,l.jsx)(n.code,{children:"platformatic.service.json"}),".\nRunning ",(0,l.jsx)(n.code,{children:"platformatic service schema config"})," you can update your schema so that it matches well the latest changes available on your config."]}),"\n",(0,l.jsx)(n.h4,{id:"start-3",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Service with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic service start\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You will need a  configuration file. Here is an example to get you started,\nsave the following as ",(0,l.jsx)(n.code,{children:"platformatic.json"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "server": {\n    "hostname": "127.0.0.1",\n    "port": 0,\n    "logger": {\n      "level": "info"\n    }\n  },\n  "plugin": {\n    "path": "./plugin.js"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"frontend",children:"frontend"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic client <url> --frontend --language <language>\n"})}),"\n",(0,l.jsx)(n.p,{children:"Create frontend code to consume the REST APIs of a Platformatic application."}),"\n",(0,l.jsxs)(n.p,{children:["From the directory you want the frontend code to be generated (typically ",(0,l.jsx)(n.code,{children:"<YOUR_FRONTEND_APP_DIRECTORY>/src/"}),") run -"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic frontend http://127.0.0.1:3042 ts\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"\u2139\ufe0f"}),"\n",(0,l.jsxs)(n.p,{children:["Where ",(0,l.jsx)(n.code,{children:"http://127.0.0.1:3042"})," must be replaced with your Platformatic application endpoint, and the language can either be ",(0,l.jsx)(n.code,{children:"ts"})," or ",(0,l.jsx)(n.code,{children:"js"}),". When the command is run, the Platformatic CLI generates -"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"api.d.ts"})," - A TypeScript module that includes all the OpenAPI-related types."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"api.ts"})," or ",(0,l.jsx)(n.code,{children:"api.js"})," - A module that includes a function for every single REST endpoint."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["If you use the ",(0,l.jsx)(n.code,{children:"--name"})," option it will create custom file names."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npx platformatic frontend http://127.0.0.1:3042 ts --name foobar\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Will create ",(0,l.jsx)(n.code,{children:"foobar.ts"})," and ",(0,l.jsx)(n.code,{children:"foobar-types.d.ts"})]}),"\n",(0,l.jsxs)(n.p,{children:["Refer to the ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/guides/generate-frontend-code-to-consume-platformatic-rest-api",children:"dedicated guide"})," where the full process of generating and consuming the frontend code is described."]}),"\n",(0,l.jsx)(n.p,{children:"In case of problems, please check that:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The Platformatic app URL is valid."}),"\n",(0,l.jsx)(n.li,{children:"The Platformatic app whose URL belongs must be up and running."}),"\n",(0,l.jsxs)(n.li,{children:["OpenAPI must be enabled (",(0,l.jsx)(n.code,{children:"db.openapi"})," in your ",(0,l.jsx)(n.code,{children:"platformatic.json"})," is not set to ",(0,l.jsx)(n.code,{children:"false"}),"). You can find more details about the db configuration format ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/db/configuration",children:"here"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["CORS must be managed in your Platformatic app (",(0,l.jsx)(n.code,{children:"server.cors.origin.regexp"})," in your ",(0,l.jsx)(n.code,{children:"platformatic.json"})," is set to ",(0,l.jsx)(n.code,{children:"/*/"}),", for instance). You can find more details about the cors configuration ",(0,l.jsx)(n.a,{href:"https://docs.platformatic.dev/docs/service/configuration",children:"here"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"runtime",children:"runtime"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic runtime <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"compile-3",children:"compile"}),"\n",(0,l.jsx)(n.p,{children:"Compile all typescript plugins for all services."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic runtime compile\n"})}),"\n",(0,l.jsx)(n.p,{children:"This command will compile the TypeScript\nplugins for each service registered in the runtime."}),"\n",(0,l.jsx)(n.h4,{id:"help-5",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help"})," - show this help message."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"help <command>"})," - shows more information about a command."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"start"})," - start the application."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"start-4",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start the Platformatic Runtime with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic runtime start\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can also specify a custom routes file, for example:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:" $ platformatic runtime start routes.js\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Where ",(0,l.jsx)(n.code,{children:"routes.js"})," is:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"module.exports = async function (app) {\n  app.get('/hello', async () => {\n    return { hello: 'hello123' }\n  })\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"start-5",children:"start"}),"\n",(0,l.jsx)(n.p,{children:"Start a Platformatic application with the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"$ platformatic start\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-c, --config <path>"})," - Path to the configuration file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect[=[host:]port]"})," - Start the Node.js debugger. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--inspect-brk[=[host:]port]"})," - Start the Node.js debugger and block until a client has attached. ",(0,l.jsx)(n.code,{children:"host"})," defaults to ",(0,l.jsx)(n.code,{children:"'127.0.0.1'"}),". ",(0,l.jsx)(n.code,{children:"port"})," defaults to 9229. Use caution when binding to a public host",":port"," combination."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"ctl",children:"ctl"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"platformatic ctl <command>\n"})}),"\n",(0,l.jsx)(n.h4,{id:"config",children:"config"}),"\n",(0,l.jsx)(n.p,{children:"Prints runtime or runtime service config file"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl config -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"config"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"env",children:"env"}),"\n",(0,l.jsx)(n.p,{children:"Lists platformatic runtime application environment variables"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl env -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"env"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"help-6",children:"help"}),"\n",(0,l.jsx)(n.p,{children:"Available commands:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ps"})," - lists all platformatic runtime applications."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"stop"})," - stops a platformatic runtime application."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"restart"})," - restarts all platformatic runtime services."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"reload"})," - reloads all platformatic runtime services."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"services"})," - lists the runtime services."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"config"})," - prints runtime or runtime service config file."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"env"})," - lists the runtime environment variables."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"logs"})," - shows the runtime logs."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"inject"})," - injects a request to the runtime service."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"inject-1",children:"inject"}),"\n",(0,l.jsx)(n.p,{children:"Injects a request to the platformatic runtime service."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'  $ platformatic ctl inject -n runtime-name /hello\n     -X POST\n     -H "Content-Type: application/json"\n     -d \'{"key": "value"}\'\n'})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-s, --service <string>"})," - The name of the runtime service."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-X, --request <string>"})," - The request HTTP method. Default is ",(0,l.jsx)(n.code,{children:"GET"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-H, --header <string>"})," - The request header. Can be used multiple times."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-d, --data <string>"})," - The request data."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-i, --include <boolean>"})," - Include the response headers in the output. Default is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-v, --verbose <boolean>"})," - Make the operation more talkative. Default is ",(0,l.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-o, --output <file>"})," - Write the response to the specified file."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inject"})," command sends a request to the runtime service and prints the\nresponse to the standard output. If the ",(0,l.jsx)(n.code,{children:"--service"})," option is not specified the\nrequest is sent to the runtime entrypoint."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"inject"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"logs-1",children:"logs"}),"\n",(0,l.jsx)(n.p,{children:"Streams logs from the platformatic runtime application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl logs -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-l, --level <string>"})," - The pino log level to stream. Default is ",(0,l.jsx)(n.code,{children:"info"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-s, --service <string>"})," - The name of the service to stream logs from."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"--pretty <boolean>"})," - Pretty print the logs. Default is ",(0,l.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["If ",(0,l.jsx)(n.code,{children:"--service"})," is not specified, the command will stream logs from all services."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"logs"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"ps-1",children:"ps"}),"\n",(0,l.jsx)(n.p,{children:"Lists all running platformatic runtime applications."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl ps\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To see the list of all available control commands, run ",(0,l.jsx)(n.code,{children:"platformatic ctl help"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ps"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsx)(n.h4,{id:"reload",children:"reload"}),"\n",(0,l.jsx)(n.p,{children:"Reloads a platformatic runtime application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl reload -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime to reload."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime to reload."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The difference between ",(0,l.jsx)(n.code,{children:"reload"})," and ",(0,l.jsx)(n.code,{children:"restart"})," is that ",(0,l.jsx)(n.code,{children:"reload"})," does not kill\nthe runtime process. It stops and starts all the runtime services."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"reload"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"restart",children:"restart"}),"\n",(0,l.jsx)(n.p,{children:"Restarts a platformatic runtime application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl restart -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime to restart."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime to restart."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"restart"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"services",children:"services"}),"\n",(0,l.jsx)(n.p,{children:"Lists the platformatic runtime services."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl services -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"services"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]}),"\n",(0,l.jsx)(n.h4,{id:"stop",children:"stop"}),"\n",(0,l.jsx)(n.p,{children:"Stops a platformatic runtime application."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"  $ platformatic ctl stop -n runtime-name\n"})}),"\n",(0,l.jsx)(n.p,{children:"Options:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-p, --pid <number>"})," - The process id of the runtime to stop."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"-n, --name <string>"})," - The name of the runtime to stop."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"stop"})," command uses the Platformatic Runtime Management API. To enable it\nset the ",(0,l.jsx)(n.code,{children:"managementApi"})," option to ",(0,l.jsx)(n.code,{children:"true"})," in the runtime configuration file."]}),"\n",(0,l.jsxs)(n.p,{children:["To get the list of runtimes with enabled management API use the\n",(0,l.jsx)(n.code,{children:"platformatic ctl ps"})," command."]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},9365:(e,n,i)=>{i.d(n,{A:()=>r});i(6540);var l=i(8215);const s={tabItem:"tabItem_Ymn6"};var t=i(4848);function r(e){let{children:n,hidden:i,className:r}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,l.A)(s.tabItem,r),hidden:i,children:n})}},1470:(e,n,i)=>{i.d(n,{A:()=>w});var l=i(6540),s=i(8215),t=i(3104),r=i(6347),c=i(205),a=i(7485),o=i(1682),d=i(679);function h(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:i}=e;return(0,l.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:i,attributes:l,default:s}}=e;return{value:n,label:i,attributes:l,default:s}}))}(i);return function(e){const n=(0,o.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function m(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function j(e){let{queryString:n=!1,groupId:i}=e;const s=(0,r.W6)(),t=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,a.aZ)(t),(0,l.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(s.location.search);n.set(t,e),s.replace({...s.location,search:n.toString()})}),[t,s])]}function x(e){const{defaultValue:n,queryString:i=!1,groupId:s}=e,t=p(e),[r,a]=(0,l.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const l=i.find((e=>e.default))??i[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:t}))),[o,h]=j({queryString:i,groupId:s}),[x,u]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,t]=(0,d.Dv)(i);return[s,(0,l.useCallback)((e=>{i&&t.set(e)}),[i,t])]}({groupId:s}),f=(()=>{const e=o??x;return m({value:e,tabValues:t})?e:null})();(0,c.A)((()=>{f&&a(f)}),[f]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),u(e)}),[h,u,t]),tabValues:t}}var u=i(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=i(4848);function b(e){let{className:n,block:i,selectedValue:l,selectValue:r,tabValues:c}=e;const a=[],{blockElementScrollPositionUntilNextRender:o}=(0,t.a_)(),d=e=>{const n=e.currentTarget,i=a.indexOf(n),s=c[i].value;s!==l&&(o(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const i=a.indexOf(e.currentTarget)+1;n=a[i]??a[0];break}case"ArrowLeft":{const i=a.indexOf(e.currentTarget)-1;n=a[i]??a[a.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":i},n),children:c.map((e=>{let{value:n,label:i,attributes:t}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,ref:e=>a.push(e),onKeyDown:h,onClick:d,...t,className:(0,s.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":l===n}),children:i??n},n)}))})}function v(e){let{lazy:n,children:i,selectedValue:t}=e;const r=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function y(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(v,{...n,...e})]})}function w(e){const n=(0,u.A)();return(0,g.jsx)(y,{...e,children:h(e.children)},String(n))}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var l=i(6540);const s={},t=l.createContext(s);function r(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);