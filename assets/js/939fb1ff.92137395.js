"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[1421],{1916:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(4848),a=t(8453);const r={id:"overview",description:"overview"},s="Platformatic Client",o={id:"client/overview",title:"Platformatic Client",description:"overview",source:"@site/versioned_docs/version-1.53.3/client/overview.md",sourceDirName:"client",slug:"/client/overview",permalink:"/docs/client/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.53.3/client/overview.md",tags:[],version:"1.53.3",frontMatter:{id:"overview",description:"overview"},sidebar:"docs",previous:{title:"Programmatic API",permalink:"/docs/service/programmatic"},next:{title:"Programmatic API",permalink:"/docs/client/programmatic"}},l={},c=[{value:"Creating a Client",id:"creating-a-client",level:2},{value:"OpenAPI Client",id:"openapi-client",level:3},{value:"GraphQL Client",id:"graphql-client",level:3},{value:"Forcing Client Type",id:"forcing-client-type",level:3},{value:"Usage with Platformatic Service or Platformatic DB",id:"usage-with-platformatic-service-or-platformatic-db",level:2},{value:"Example Usage in JavaScript (GraphQL)",id:"example-usage-in-javascript-graphql",level:3},{value:"Example Usage in TypeScript (OpenAPI)",id:"example-usage-in-typescript-openapi",level:3},{value:"Client Configuration Example",id:"client-configuration-example",level:3},{value:"Generating a client for a service running within Platformatic Runtime",id:"generating-a-client-for-a-service-running-within-platformatic-runtime",level:2},{value:"Example",id:"example",level:3},{value:"Types Generator",id:"types-generator",level:2},{value:"Example",id:"example-1",level:3},{value:"OpenAPI Types",id:"openapi-types",level:3},{value:"GraphQL Types",id:"graphql-types",level:3},{value:"Usage with Standalone Fastify",id:"usage-with-standalone-fastify",level:2},{value:"Method Names in OpenAPI",id:"method-names-in-openapi",level:2},{value:"Authentication",id:"authentication",level:2},{value:"Telemetry propagation",id:"telemetry-propagation",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"platformatic-client",children:"Platformatic Client"})}),"\n",(0,i.jsx)(n.p,{children:"Create a Fastify plugin that exposes a client for a remote OpenAPI or GraphQL API."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-client",children:"Creating a Client"}),"\n",(0,i.jsx)(n.h3,{id:"openapi-client",children:"OpenAPI Client"}),"\n",(0,i.jsx)(n.p,{children:"To create a client for a remote OpenAPI API, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/to/schema/file --name myclient\n"})}),"\n",(0,i.jsx)(n.h3,{id:"graphql-client",children:"GraphQL Client"}),"\n",(0,i.jsx)(n.p,{children:"To create a client for a remote Graphql API, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/grapqhl --name myclient\n"})}),"\n",(0,i.jsx)(n.h3,{id:"forcing-client-type",children:"Forcing Client Type"}),"\n",(0,i.jsxs)(n.p,{children:["If the Platformatic app supports both OpenAPI and GraphQL, the OpenAPI client will be the one generated by default. To force the generation of a specific client, pass the ",(0,i.jsx)(n.code,{children:"--type <openapi | graphql>"})," parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"$ platformatic client http://example.com/to/schema/file --name myclient --type graphql\n"})}),"\n",(0,i.jsx)(n.h2,{id:"usage-with-platformatic-service-or-platformatic-db",children:"Usage with Platformatic Service or Platformatic DB"}),"\n",(0,i.jsxs)(n.p,{children:["Running the generator in a Platformatic application automatically extends it to load your client by editing the configuration file and adding a ",(0,i.jsx)(n.code,{children:"clients"})," section."]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-in-javascript-graphql",children:"Example Usage in JavaScript (GraphQL)"}),"\n",(0,i.jsx)(n.p,{children:"Use the client in your JavaScript application, by calling a GraphQL endpoint:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Use a typescript reference to set up autocompletion\n// and explore the generated APIs.\n\n/// <reference path=\"./myclient\" />\n\n/**  @type {import('fastify').FastifyPluginAsync<{} */\nmodule.exports = async function (app, opts) {\n  app.post('/', async (request, reply) => {\n    const res = await request.myclient.graphql({\n      query: 'query { movies { title } }'\n    })\n    return res\n  })\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-usage-in-typescript-openapi",children:"Example Usage in TypeScript (OpenAPI)"}),"\n",(0,i.jsx)(n.p,{children:"Use the client in Typescript application, by calling an OpenAPI endpoint:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { FastifyInstance } from 'fastify'\n/// <reference path=\"./myclient\" />\n\nexport default async function (app: FastifyInstance) {\n  app.get('/', async (request, reply) => {\n    return requests.myclient.get({})\n  })\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"client-configuration-example",children:"Client Configuration Example"}),"\n",(0,i.jsxs)(n.p,{children:["The client configuration in the ",(0,i.jsx)(n.code,{children:"platformatic.json"})," would look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "clients": [{\n    "schema": "./myclient/myclient.openapi.json" // or ./myclient/myclient.schema.graphl\n    "name": "myclient",\n    "type": "openapi" // or graphql\n    "url": "{ PLT_MYCLIENT_URL }"\n  }]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the generator would also have updated the ",(0,i.jsx)(n.code,{children:".env"})," and ",(0,i.jsx)(n.code,{children:".env.sample"})," files if they exist."]}),"\n",(0,i.jsx)(n.h2,{id:"generating-a-client-for-a-service-running-within-platformatic-runtime",children:"Generating a client for a service running within Platformatic Runtime"}),"\n",(0,i.jsx)(n.p,{children:"Platformatic Runtime allows you to create a network of services that are not exposed.\nTo create a client to invoke one of those services from another, run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ platformatic client --name <clientname> --runtime <serviceId>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"<clientname>"})," is the name of the client and ",(0,i.jsx)(n.code,{children:"<serviceId>"})," is the id of the given service\n(which correspond in the basic case with the folder name of that service).\nThe client generated is identical to the one in the previous section."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that this command looks for a ",(0,i.jsx)(n.code,{children:"platformatic.json"})," in a parent directory."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"As an example, consider a network of three microservices:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"somber-chariot"}),", an instance of Platformatic DB;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"languid-noblemen"}),", an instance of Platformatic Service;"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pricey-paesant"}),", an instance of Platformatic Composer, which is also the runtime entrypoint."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["From within the ",(0,i.jsx)(n.code,{children:"languid-noblemen"})," folder, we can run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ platformatic client --name chariot --runtime somber-chariot\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The client configuration in the ",(0,i.jsx)(n.code,{children:"platformatic.json"})," would look like:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "clients": [{\n    "path": "./chariot",\n    "serviceId": "somber-chariot"\n  }]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Even if the client is generated from an HTTP endpoint, it is possible to add a ",(0,i.jsx)(n.code,{children:"serviceId"})," property each client object shown above.\nThis is not required, but if using the Platformatic Runtime, the ",(0,i.jsx)(n.code,{children:"serviceId"}),"\nproperty will be used to identify the service dependency."]}),"\n",(0,i.jsx)(n.h2,{id:"types-generator",children:"Types Generator"}),"\n",(0,i.jsxs)(n.p,{children:["Types for the client are automatically generated for both OpenAPI and GraphQL schemas. You can generate only the types with the ",(0,i.jsx)(n.code,{children:"--types-only"})," flag."]}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ platformatic client http://example.com/to/schema/file --name myclient --types-only\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will create the single ",(0,i.jsx)(n.code,{children:"myclient.d.ts"})," file."]}),"\n",(0,i.jsx)(n.h3,{id:"openapi-types",children:"OpenAPI Types"}),"\n",(0,i.jsx)(n.p,{children:"We provide a fully typed experience for OpenAPI, typing both the request and response for\neach individual OpenAPI operation. Take a look at the example below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Omitting all the individual Request and Reponse payloads for brevity\n\ninterface Client {\n  getMovies(req: GetMoviesRequest): Promise<Array<GetMoviesResponse>>;\n  createMovie(req: CreateMovieRequest): Promise<CreateMovieResponse>;\n  updateMovies(req: UpdateMoviesRequest): Promise<Array<UpdateMoviesResponse>>;\n  getMovieById(req: GetMovieByIdRequest): Promise<GetMovieByIdResponse>;\n  updateMovie(req: UpdateMovieRequest): Promise<UpdateMovieResponse>;\n  updateMovie(req: UpdateMovieRequest): Promise<UpdateMovieResponse>;\n  deleteMovies(req: DeleteMoviesRequest): Promise<DeleteMoviesResponse>;\n  getQuotesForMovie(req: GetQuotesForMovieRequest): Promise<Array<GetQuotesForMovieResponse>>;\n  getQuotes(req: GetQuotesRequest): Promise<Array<GetQuotesResponse>>;\n  createQuote(req: CreateQuoteRequest): Promise<CreateQuoteResponse>;\n  updateQuotes(req: UpdateQuotesRequest): Promise<Array<UpdateQuotesResponse>>;\n  getQuoteById(req: GetQuoteByIdRequest): Promise<GetQuoteByIdResponse>;\n  updateQuote(req: UpdateQuoteRequest): Promise<UpdateQuoteResponse>;\n  updateQuote(req: UpdateQuoteRequest): Promise<UpdateQuoteResponse>;\n  deleteQuotes(req: DeleteQuotesRequest): Promise<DeleteQuotesResponse>;\n  getMovieForQuote(req: GetMovieForQuoteRequest): Promise<GetMovieForQuoteResponse>;\n}\n\ntype ClientPlugin = FastifyPluginAsync<NonNullable<client.ClientOptions>>\n\ndeclare module 'fastify' {\n  interface FastifyInstance {\n    'client': Client;\n  }\n\n  interface FastifyRequest {\n    'client': Client;\n  }\n}\n\ndeclare namespace Client {\n  export interface ClientOptions {\n    url: string\n  }\n  export const client: ClientPlugin;\n  export { client as default };\n}\n\ndeclare function client(...params: Parameters<ClientPlugin>): ReturnType<ClientPlugin>;\nexport = client;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"graphql-types",children:"GraphQL Types"}),"\n",(0,i.jsx)(n.p,{children:"We provide a partially typed experience for GraphQL, because we do not want to limit\nhow you are going to query the remote system. Take a look at this example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"declare module 'fastify' {\n  interface GraphQLQueryOptions {\n    query: string;\n    headers: Record<string, string>;\n    variables: Record<string, unknown>;\n  }\n  interface GraphQLClient {\n    graphql<T>(GraphQLQuery): PromiseLike<T>;\n  }\n  interface FastifyInstance {\n    'client'\n    : GraphQLClient;\n\n  }\n\n  interface FastifyRequest {\n    'client'<T>(GraphQLQuery): PromiseLike<T>;\n  }\n}\n\ndeclare namespace client {\n  export interface Clientoptions {\n    url: string\n  }\n  export interface Movie {\n    'id'?: string;\n\n    'title'?: string;\n\n    'realeasedDate'?: string;\n\n    'createdAt'?: string;\n\n    'preferred'?: string;\n\n    'quotes'?: Array<Quote>;\n\n  }\n  export interface Quote {\n    'id'?: string;\n\n    'quote'?: string;\n\n    'likes'?: number;\n\n    'dislikes'?: number;\n\n    'movie'?: Movie;\n\n  }\n  export interface MoviesCount {\n    'total'?: number;\n\n  }\n  export interface QuotesCount {\n    'total'?: number;\n\n  }\n  export interface MovieDeleted {\n    'id'?: string;\n\n  }\n  export interface QuoteDeleted {\n    'id'?: string;\n\n  }\n  export const client: Clientplugin;\n  export { client as default };\n}\n\ndeclare function client(...params: Parameters<Clientplugin>): ReturnType<Clientplugin>;\nexport = client;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Given only you can know what GraphQL query you are producing, you are responsible for typing\nit accordingly."}),"\n",(0,i.jsx)(n.h2,{id:"usage-with-standalone-fastify",children:"Usage with Standalone Fastify"}),"\n",(0,i.jsx)(n.p,{children:"If a platformatic configuration file is not found, a complete Fastify plugin is generated to be\nused in your Fastify application like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const fastify = require('fastify')()\nconst client = require('./your-client-name')\n\nfastify.register(client, {\n  url: 'http://example.com'\n})\n\n// GraphQL\nfastify.post('/', async (request, reply) => {\n  const res = await request.movies.graphql({\n    query: 'mutation { saveMovie(input: { title: \"foo\" }) { id, title } }'\n  })\n  return res\n})\n\n// OpenAPI\nfastify.post('/', async (request, reply) => {\n  const res = await request.movies.createMovie({ title: 'foo' })\n  return res\n})\n\nfastify.listen({ port: 3000 })\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that you would need to install ",(0,i.jsx)(n.code,{children:"@platformatic/client"})," as a dependency."]}),"\n",(0,i.jsx)(n.h2,{id:"method-names-in-openapi",children:"Method Names in OpenAPI"}),"\n",(0,i.jsxs)(n.p,{children:["The names of the operations are defined in the OpenAPI specification using the ",(0,i.jsx)(n.a,{href:"https://swagger.io/specification/",children:(0,i.jsx)(n.code,{children:"operationId"})}),". If it's not specified, the name is generated by combining the parts of the path, like ",(0,i.jsx)(n.code,{children:"/something/{param1}/"})," and a method ",(0,i.jsx)(n.code,{children:"GET"}),", it generates ",(0,i.jsx)(n.code,{children:"getSomethingParam1"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(n.p,{children:"To add necessary headers for downstream services requiring authentication, configure them in your plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"/// <reference path=\"./myclient\" />\n\n/**  @type {import('fastify').FastifyPluginAsync<{} */\nmodule.exports = async function (app, opts) {\n  app.configureMyclient({\n    async getHeaders (req, reply) {\n      return {\n        'foo': 'bar'\n      }\n    }\n  })\n\n  app.post('/', async (request, reply) => {\n    const res = await request.myclient.graphql({\n      query: 'query { movies { title } }'\n    })\n    return res\n  })\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"telemetry-propagation",children:"Telemetry propagation"}),"\n",(0,i.jsx)(n.p,{children:"To correctly propagate telemetry information, be sure to get the client from the request object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"fastify.post('/', async (request, reply) => {\n  const res = await request.movies.createMovie({ title: 'foo' })\n  return res\n})\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);