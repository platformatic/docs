"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[5078],{3801:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var o=i(4848),l=i(8453);const t={},s="Deploy Platformatic Applications to Fly.io",a={id:"guides/deployment/deploy-to-fly-io-with-sqlite",title:"Deploy Platformatic Applications to Fly.io",description:"Deploying a Platformatic Runtime Application",source:"@site/versioned_docs/version-1.53.3/guides/deployment/deploy-to-fly-io-with-sqlite.md",sourceDirName:"guides/deployment",slug:"/guides/deployment/deploy-to-fly-io-with-sqlite",permalink:"/docs/guides/deployment/deploy-to-fly-io-with-sqlite",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.53.3/guides/deployment/deploy-to-fly-io-with-sqlite.md",tags:[],version:"1.53.3",frontMatter:{},sidebar:"Learn",previous:{title:"Overview",permalink:"/docs/guides/deployment/overview"},next:{title:"Advanced Fly.io Deployment",permalink:"/docs/guides/deployment/advanced-fly-io-deployment"}},r={},c=[{value:"Deploying a Platformatic Runtime Application",id:"deploying-a-platformatic-runtime-application",level:2},{value:"Dockerfile for Runtime Application",id:"dockerfile-for-runtime-application",level:3},{value:"Explanation",id:"explanation",level:3},{value:"TypeScript Compilation for Deployment",id:"typescript-compilation-for-deployment",level:3},{value:"Configure Environment",id:"configure-environment",level:3},{value:"Deploy Application",id:"deploy-application",level:3},{value:"Deploy a Platformatic DB Application to Fly.io",id:"deploy-a-platformatic-db-application-to-flyio",level:2},{value:"Explicit Builder",id:"explicit-builder",level:3},{value:"Database Storage",id:"database-storage",level:3},{value:"Configure Environment",id:"configure-environment-1",level:3},{value:"TypeScript Compilation for Deployment",id:"typescript-compilation-for-deployment-1",level:3},{value:"Deploy application",id:"deploy-application-1",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"deploy-platformatic-applications-to-flyio",children:"Deploy Platformatic Applications to Fly.io"})}),"\n",(0,o.jsx)(n.h2,{id:"deploying-a-platformatic-runtime-application",children:"Deploying a Platformatic Runtime Application"}),"\n",(0,o.jsxs)(n.p,{children:["This guide provides instructions on deploying a Platformatic Runtime application to Fly.io. With a runtime application, you are deploying your entire application, including all services in the ",(0,o.jsx)(n.code,{children:"services"})," folder."]}),"\n",(0,o.jsx)(n.h3,{id:"dockerfile-for-runtime-application",children:"Dockerfile for Runtime Application"}),"\n",(0,o.jsx)(n.p,{children:"Here is an example Dockerfile for a Platformatic Runtime application:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'FROM node:20-alpine AS builder\n\nENV APP_HOME=/home/app/node/\nWORKDIR $APP_HOME\n\nCOPY package.json package-lock.json ./\nCOPY services/devotion/package.json services/devotion/package.json\n\nRUN npm ci \n\nCOPY . .\n\nRUN npx platformatic compile\n\nFROM node:20-alpine\n\nENV APP_HOME=/home/app/node/\nWORKDIR $APP_HOME\n\nCOPY package.json package-lock.json ./\nRUN npm ci --only=production\n\nCOPY --from=builder $APP_HOME/dist ./dist\n\nEXPOSE 3042\n\nCMD ["node", "node_modules/.bin/platformatic", "start"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"ARG VITE_AI_URL and ENV VITE_AI_URL"}),": Sets up environment variables for your application."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"WORKDIR $APP_HOM"}),"E: Sets the working directory inside the container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"COPY commands"}),": Copies the necessary files and folders into the container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RUN npm install"}),": Installs the dependencies for all services."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RUN cd services/..."}),": Installs dependencies and builds each service in the services folder."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"EXPOSE 3042"}),": Exposes the application port."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:'CMD ["npm", "start"]'}),": Specifies the command to run all services in the application."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"FROM node:20-alpine"}),": Specifies the base image for the runtime image."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RUN npm ci"}),": Installs all dependencies including development dependencies"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["It's important to create a ",(0,o.jsx)(n.code,{children:".dockerignore"})," file in your project's root directory. This file should exclude unnecessary files and directories, such as ",(0,o.jsx)(n.code,{children:"node_modules"}),", ",(0,o.jsx)(n.code,{children:"dist"}),", ",(0,o.jsx)(n.code,{children:".env"}),", and any other files that are not required in the Docker image. By doing so, you can avoid copying large and redundant files into the Docker image, which can significantly reduce the image size and build time."]}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of a sample ",(0,o.jsx)(n.code,{children:".dockerignore"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"node_modules\nnpm-debug.log\nDockerfile\n.dockerignore\n.env\n*.log\ndist\n"})}),"\n",(0,o.jsx)(n.h3,{id:"typescript-compilation-for-deployment",children:"TypeScript Compilation for Deployment"}),"\n",(0,o.jsx)(n.p,{children:"To compile your TypeScript files before deployment, update your platformatic.runtime.json to include TypeScript settings"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "plugins": {\n    "paths": [{\n      "path": "plugins",\n      "encapsulate": false\n    }, "routes"],\n    "typescript": {\n      "enabled": "{PLT_TYPESCRIPT}",\n      "outDir": "dist"\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Ensure ",(0,o.jsx)(n.code,{children:"PLT_TYPESCRIPT=true"})," in your ",(0,o.jsx)(n.code,{children:".env"})," file for local development. For deployment, set ",(0,o.jsx)(n.code,{children:"PLT_TYPESCRIPT=false"})," to avoid compiling TypeScript at runtime."]}),"\n",(0,o.jsx)(n.p,{children:"Compile your TypeScript source files with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"plt runtime compile\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This compiles your TypeScript files and outputs them to the specified ",(0,o.jsx)(n.code,{children:"outDir"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"configure-environment",children:"Configure Environment"}),"\n",(0,o.jsxs)(n.p,{children:["Start with your local environment. Create a ",(0,o.jsx)(n.code,{children:".env"})," file and put the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"PORT=3042\nPLT_SERVER_HOSTNAME=127.0.0.1\nPLT_SERVER_LOGGER_LEVEL=debug\nDATABASE_URL=sqlite://.platformatic/data/movie-quotes.runtime\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Avoid accidental leaks by ignoring your ",(0,o.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'echo ".env" >> .gitignore\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This same configuration needs to be added to ",(0,o.jsx)(n.code,{children:"fly.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[env]\n  PORT = 8080\n  PLT_SERVER_HOSTNAME = "0.0.0.0"\n  PLT_SERVER_LOGGER_LEVEL = "info"\n  DATABASE_URL = "sqlite:///app/.platformatic/data/movie-quotes.runtime"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"deploy-application",children:"Deploy Application"}),"\n",(0,o.jsxs)(n.p,{children:["Before deploying, make sure a ",(0,o.jsx)(n.code,{children:".dockerignore"})," file is created:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"cp .gitignore .dockerignore\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally, deploy the application to Fly.io by running:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"fly deploy\n"})}),"\n",(0,o.jsx)(n.h2,{id:"deploy-a-platformatic-db-application-to-flyio",children:"Deploy a Platformatic DB Application to Fly.io"}),"\n",(0,o.jsxs)(n.p,{children:["To follow this how-to guide, you'll first need to install the Fly CLI and create\nan account by ",(0,o.jsx)(n.a,{href:"https://fly.io/docs/hands-on/",children:"following this official guide"}),".\nYou will also need an existing ",(0,o.jsx)(n.a,{href:"/docs/db/overview",children:"Platformatic DB"})," project, please check out our\n",(0,o.jsx)(n.a,{href:"/docs/getting-started/quick-start-guide",children:"getting started guide"})," if needed."]}),"\n",(0,o.jsxs)(n.p,{children:["Navigate to your Platformatic DB project in the terminal on your local machine.\nRun ",(0,o.jsx)(n.code,{children:"fly launch"}),' and follow the prompts. When it asks if you want to deploy\nnow, say "no" as there are a few things that you\'ll need to configure first.']}),"\n",(0,o.jsxs)(n.p,{children:["You can also create the fly application with one line. This will create your\napplication in London (",(0,o.jsx)(n.code,{children:"lhr"}),"):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"fly launch --no-deploy --generate-name --region lhr --org personal --path .\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"fly"})," CLI should have created a ",(0,o.jsx)(n.code,{children:"fly.toml"})," file in your project\ndirectory."]}),"\n",(0,o.jsx)(n.h3,{id:"explicit-builder",children:"Explicit Builder"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"fly.toml"})," file may be missing an explicit builder setting. To have consistent builds, it is best to add a ",(0,o.jsx)(n.code,{children:"build"})," section:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[build]\n  builder = "heroku/buildpacks:20"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"database-storage",children:"Database Storage"}),"\n",(0,o.jsxs)(n.p,{children:["Create a volume for database storage, naming it ",(0,o.jsx)(n.code,{children:"data"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"fly volumes create data\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will create storage in the same region as the application. The volume defaults to 3GB size, use  ",(0,o.jsx)(n.code,{children:"-s"})," to change the size. For example, ",(0,o.jsx)(n.code,{children:"-s 10"})," is 10GB."]}),"\n",(0,o.jsxs)(n.p,{children:["Add a ",(0,o.jsx)(n.code,{children:"mounts"})," section in ",(0,o.jsx)(n.code,{children:"fly.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[mounts]\n  source = "data"\n  destination = "/app/.platformatic/data"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Create a directory in your project where your SQLite database will be created:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir -p .platformatic/data\n\ntouch .platformatic/data/.gitkeep\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:".gitkeep"})," file ensures that this directory will always be created when your application is deployed."]}),"\n",(0,o.jsx)(n.p,{children:"You should also ensure that your SQLite database is ignored by Git. This helps avoid inconsistencies when your application is deployed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'echo "*.db" >> .gitignore\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The command above assumes that your SQLite database file ends with the extension ",(0,o.jsx)(n.code,{children:".db"})," \u2014 if the extension is different then you must change the command to match."]}),"\n",(0,o.jsxs)(n.p,{children:["Update your  ",(0,o.jsx)(n.code,{children:"platformatic.json"})," configuration file to use environment variables for the database connection and server settings:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "db": {\n    "connectionString": "{DATABASE_URL}"\n  },\n  "migrations": {\n    "dir": "./migrations",\n    "autoApply": true\n  },\n  "server": {\n    "logger": {\n      "level": "{PLT_SERVER_LOGGER_LEVEL}"\n    },\n    "hostname": "{PLT_SERVER_HOSTNAME}",\n    "port": "{PORT}"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"configure-environment-1",children:"Configure Environment"}),"\n",(0,o.jsxs)(n.p,{children:["Start with your local environment, create a ",(0,o.jsx)(n.code,{children:".env"})," file and put the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"PORT=3042\nPLT_SERVER_HOSTNAME=127.0.0.1\nPLT_SERVER_LOGGER_LEVEL=debug\nDATABASE_URL=sqlite://.platformatic/data/movie-quotes.db\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Avoid accidental leaks by ignoring your ",(0,o.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'echo ".env" >> .gitignore\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This same configuration needs to added to ",(0,o.jsx)(n.code,{children:"fly.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[env]\n  PORT = 8080\n  PLT_SERVER_HOSTNAME = "0.0.0.0"\n  PLT_SERVER_LOGGER_LEVEL = "info"\n  DATABASE_URL = "sqlite:///app/.platformatic/data/movie-quotes.db"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"typescript-compilation-for-deployment-1",children:"TypeScript Compilation for Deployment"}),"\n",(0,o.jsxs)(n.p,{children:["To compile your TypeScript files before deployment, update your ",(0,o.jsx)(n.code,{children:"platformatic.json"})," to include TypeScript settings:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "plugins": {\n    "paths": [{\n      "path": "plugins",\n      "encapsulate": false\n    }, "routes"],\n    "typescript": {\n      "enabled": "{PLT_TYPESCRIPT}",\n      "outDir": "dist"\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Ensure ",(0,o.jsx)(n.code,{children:"PLT_TYPESCRIPT=true"})," in your ",(0,o.jsx)(n.code,{children:".env"})," file for local development. For deployment, set ",(0,o.jsx)(n.code,{children:"PLT_TYPESCRIPT=false"})," to avoid compiling TypeScript at runtime."]}),"\n",(0,o.jsx)(n.p,{children:"Compile your TypeScript source files with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"plt service compile \n"})}),"\n",(0,o.jsxs)(n.p,{children:["This compiles your TypeScript files and outputs them to the specified ",(0,o.jsx)(n.code,{children:"outDir"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"deploy-application-1",children:"Deploy application"}),"\n",(0,o.jsxs)(n.p,{children:["A valid ",(0,o.jsx)(n.code,{children:"package.json"})," will be needed so if you do not have one, generate one by running ",(0,o.jsx)(n.code,{children:"npm init"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In your ",(0,o.jsx)(n.code,{children:"package.json"}),", make sure there is a ",(0,o.jsx)(n.code,{children:"start"})," script to run your application:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "start": "platformatic start"\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Before deploying, make sure a ",(0,o.jsx)(n.code,{children:".dockerignore"})," file is created:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"cp .gitignore .dockerignore\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally, deploy the application to Fly by running:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"fly deploy\n"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(6540);const l={},t=o.createContext(l);function s(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);