"use strict";(self.webpackChunkplatformatic_oss_website=self.webpackChunkplatformatic_oss_website||[]).push([[2102,1755],{5669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=n(4848),r=n(8453),i=n(1470),o=n(9365);const s={},l=void 0,c={id:"getting-started/new-api-project-instructions",title:"new-api-project-instructions",description:"To start the Platformatic creator wizard, run the appropriate command for your package manager in your terminal:",source:"@site/versioned_docs/version-1.53.3/getting-started/new-api-project-instructions.md",sourceDirName:"getting-started",slug:"/getting-started/new-api-project-instructions",permalink:"/docs/getting-started/new-api-project-instructions",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.53.3/getting-started/new-api-project-instructions.md",tags:[],version:"1.53.3",frontMatter:{}},d={},u=[];function h(e){const t={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"To start the Platformatic creator wizard, run the appropriate command for your package manager in your terminal:"}),"\n",(0,a.jsxs)(i.A,{groupId:"package-manager-create",children:[(0,a.jsx)(o.A,{value:"npm",label:"npm",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm create platformatic@latest\n"})})}),(0,a.jsx)(o.A,{value:"yarn",label:"yarn",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"yarn create platformatic\n"})})}),(0,a.jsx)(o.A,{value:"pnpm",label:"pnpm",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"pnpm create platformatic@latest\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:"This interactive command-line tool will guide you through setting up a new Platformatic project. For this guide, please choose the following options:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"- What kind of project do you want to create?   => Application\n- Where would you like to create your project?  => quick-start\n- Which kind of project do you want to create?  => @platformatic/db\n- What is the name of the service?              => (generated-randomly), e.g. legal-soup\n- What is the connection string?                => sqlite://./db.sqlite\n- Do you want to create default migrations?     => Yes\n- Do you want to create another service?        => No\n- Do you want to use TypeScript?                => No\n- What port do you want to use?                 => 3042\n- Do you want to init the git repository?       => No\n"})}),"\n",(0,a.jsxs)(t.p,{children:["After completing the wizard, your Platformatic application will be ready in the ",(0,a.jsx)(t.code,{children:"quick-start"})," folder. This includes example migration files, plugin scripts, routes, and tests within your service directory."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["If the wizard does not handle dependency installation, ensure to run ",(0,a.jsx)(t.code,{children:"npm/yarn/pnpm"})," install command manually:"]})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(4848),r=n(8453),i=n(5669);const o={title:"Build a Todo API",label:"Building a Todo API with Platformatic DB"},s="Building a Todo API with Platformatic DB",l={id:"learn/beginner/crud-application",title:"Build a Todo API",description:"In this tutorial, we will build a simple ToDo application using Platformatic DB. Platformatic DB makes it easy to create endpoints that return data from a database application. It automatically generates REST/GraphQL endpoints by mapping your database and then exposes these endpoints to your API consumers.",source:"@site/versioned_docs/version-1.53.3/learn/beginner/crud-application.md",sourceDirName:"learn/beginner",slug:"/learn/beginner/crud-application",permalink:"/docs/learn/beginner/crud-application",draft:!1,unlisted:!1,editUrl:"https://github.com/platformatic/oss/edit/main/versioned_docs/version-1.53.3/learn/beginner/crud-application.md",tags:[],version:"1.53.3",frontMatter:{title:"Build a Todo API",label:"Building a Todo API with Platformatic DB"},sidebar:"Learn",previous:{title:"Quick Start Guide",permalink:"/docs/getting-started/quick-start-guide"},next:{title:"Movie Quotes App Tutorial",permalink:"/docs/guides/movie-quotes-app-tutorial"}},c={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Building a Todo API",id:"building-a-todo-api",level:2},{value:"Setting Up the Project",id:"setting-up-the-project",level:2},...i.toc,{value:"Setting up Migrations",id:"setting-up-migrations",level:2},{value:"Creating a User table",id:"creating-a-user-table",level:3},{value:"Testing API endpoints",id:"testing-api-endpoints",level:3},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"building-a-todo-api-with-platformatic-db",children:"Building a Todo API with Platformatic DB"})}),"\n",(0,a.jsxs)(t.p,{children:["In this tutorial, we will build a simple ToDo application using ",(0,a.jsx)(t.a,{href:"/docs/db/overview",children:"Platformatic DB"}),". Platformatic DB makes it easy to create endpoints that return data from a database application. It automatically generates REST/GraphQL endpoints by mapping your database and then exposes these endpoints to your API consumers."]}),"\n",(0,a.jsx)(t.p,{children:"This guide will walk you through the steps to build Todo CRUD API with Platformatic, highlighting the differences compared to building traditional APIs."}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(t.p,{children:"Before we begin, make sure you have the following installed:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"https://nodejs.org/en",children:"Node.js"})," (v18 or higher)"]}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/docs/cli",children:"Platformatic CLI"})}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"building-a-todo-api",children:"Building a Todo API"}),"\n",(0,a.jsx)(t.p,{children:"This application is a quick way to get started with building APIs on Platformatic. We will be building a simple CRUD API to manage Todo items. Creating a Todo API with Platformatic DB is as easy as creating a database and then mapping it to a GraphQL or REST API."}),"\n",(0,a.jsx)(t.p,{children:"Let's get started!"}),"\n",(0,a.jsx)(t.h2,{id:"setting-up-the-project",children:"Setting Up the Project"}),"\n",(0,a.jsx)(t.p,{children:"To create and run your Platformatic Todo application, run the following commands:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx create-platformatic@latest\n"})}),"\n",(0,a.jsx)("newApiProjectInstructions",{}),"\n",(0,a.jsx)(t.p,{children:"Run the command to start your application:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,a.jsx)(t.h2,{id:"setting-up-migrations",children:"Setting up Migrations"}),"\n",(0,a.jsxs)(t.p,{children:["Platformatic DB uses ",(0,a.jsx)(t.a,{href:"https://www.sqlite.org/",children:"SQLite"})," as the default database for any Platformatic DB application, you can see the SQL definition in the ",(0,a.jsx)(t.code,{children:".env"})," file in the root folder of your application."]}),"\n",(0,a.jsxs)(t.p,{children:["For the Todo API, we need two tables, Users and Todos, let's edit the migrations generated by ",(0,a.jsx)(t.a,{href:"/docs/cli",children:"Platformatic CLI"})," to add these tables:"]}),"\n",(0,a.jsx)(t.h3,{id:"creating-a-user-table",children:"Creating a User table"}),"\n",(0,a.jsxs)(t.p,{children:["To create the users table, navigate to the ",(0,a.jsx)(t.code,{children:"db/migrations"})," directory and edit ",(0,a.jsx)(t.code,{children:"001.do.sql"})," file, and add the schema below:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS User (\n    id INTEGER PRIMARY KEY,\n    username TEXT NOT NULL UNIQUE,\n    password TEXT NOT NULL,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["And let's edit the ",(0,a.jsx)(t.code,{children:"migrations/001.undo.sql"})," file to look like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"DROP TABLE User;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Before we apply the migrations, let's create a new table for our Todos, to do that create another file ",(0,a.jsx)(t.code,{children:"002.do.sql"})," and inside it, add the schema for your Todos table."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS Todo (\n    id INTEGER PRIMARY KEY,\n    user_id INTEGER,\n    title TEXT NOT NULL,\n    description TEXT,\n    due_date DATE,\n    completed BOOLEAN DEFAULT 0\n);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["And again, add a new file ",(0,a.jsx)(t.code,{children:"002.undo.sql"})," to drop the table."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"DROP TABLE Todo;\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["See the ",(0,a.jsx)(t.a,{href:"/docs/learn/glossary",children:"Glossary"})," for terminologies and definitions used in ",(0,a.jsx)(t.a,{href:"/docs/db/overview",children:"Platformatic DB"}),"."]})}),"\n",(0,a.jsx)(t.p,{children:"Now let's apply the migrations we just created by running the command below:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx platformatic db migrations apply\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Notice that after running migrations, you get a ",(0,a.jsx)(t.code,{children:"global.d.ts"})," and a types folder with all our types and interfaces automatically generated by ",(0,a.jsx)(t.a,{href:"/docs/db/overview",children:"Platformatic DB"}),". The ",(0,a.jsx)(t.code,{children:"global.d.ts"})," file is used for querying the Platformatic database."]}),"\n",(0,a.jsx)(t.p,{children:"Now, start your Platformatic DB application by running:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Now you'll see this screen when you open ",(0,a.jsx)(t.code,{children:"http://0.0.0.0:3042/"})," in your browser:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Platformatic DB local server",src:n(3854).A+"",width:"1440",height:"840"})}),"\n",(0,a.jsx)(t.h3,{id:"testing-api-endpoints",children:"Testing API endpoints"}),"\n",(0,a.jsxs)(t.p,{children:["To test our API endpoints from Platformatic, click on the ",(0,a.jsx)(t.strong,{children:"OpenAPI Documentation link"}),"  on this page ",(0,a.jsx)(t.code,{children:"http://0.0.0.0:3042/"}),". This will open the ",(0,a.jsx)(t.a,{href:"https://docs.scalar.com/swagger-editor",children:"Swagger editor"})," editor with all the API endpoints we just created."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Todo API endpoints",src:n(3379).A+"",width:"1440",height:"840"})}),"\n",(0,a.jsxs)(t.p,{children:["Click on ",(0,a.jsx)(t.strong,{children:"Test request"})," and test the ",(0,a.jsx)(t.strong,{children:"Create Todo"})," endpoint as shown below:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"Testing API endpoint",src:n(8896).A+"",width:"1440",height:"840"})}),"\n",(0,a.jsxs)(t.p,{children:["You should get a ",(0,a.jsx)(t.strong,{children:"200 OK"})," status code for a successful request."]}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(t.p,{children:["Congratulations! You have successfully created a simple Todo API using Platformatic. This tutorial covered the basics of setting up a Platformatic project, defining a schema, configuring the service, and creating API endpoints. For more advanced features and configurations, refer to the ",(0,a.jsx)(t.a,{href:"/docs/cli",children:"Platformatic API Documentation"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>o});n(6540);var a=n(8215);const r={tabItem:"tabItem_Ymn6"};var i=n(4848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,o),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>y});var a=n(6540),r=n(8215),i=n(3104),o=n(6347),s=n(205),l=n(7485),c=n(1682),d=n(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[c,u]=m({queryString:n,groupId:r}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,d.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),b=(()=>{const e=c??g;return p({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function x(e){let{className:t,block:n,selectedValue:a,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),r=s[n].value;r!==a&&(c(t),o(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...i,className:(0,r.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=g(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,j.jsx)(x,{...t,...e}),(0,j.jsx)(w,{...t,...e})]})}function y(e){const t=(0,f.A)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(t))}},3379:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/plt-endpoints-76794a163664dd585789a93036f6242d.png"},3854:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/plt-localhost-c3d0b8f708d5dec1f2ccbd4f08700a88.png"},8896:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/test-endpoint-3a92a80d605f0b212f03e15d7a49ef82.png"},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(6540);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);